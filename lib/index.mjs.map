{
  "version": 3,
  "sources": ["../src/level.ts", "../src/tracing.ts", "../src/scope.ts", "../src/node.ts"],
  "sourcesContent": ["const LEVELS = ['debug', 'info', 'warn', 'error'] as const;\nexport type Level = (typeof LEVELS)[number];\n\n/** Diff current level from target. */\nexport function diffLevel(target: Level, current: Level) {\n  const targetLevel = LEVELS.findIndex(x => x === target);\n  const currentLevel = LEVELS.findIndex(x => x === current);\n  return currentLevel - targetLevel;\n}\n\nexport function parseLevel(levelStr: string) {\n  return LEVELS.find(x => x === levelStr.toLowerCase());\n}\n", "import { type Colorize, green, grey, red, yellow } from 'kleur/colors';\nimport { diffLevel, type Level } from './level';\nimport { findScopeLevel, parseScopes, type Scope } from './scope';\nimport { getProcessEnv } from './node';\n\nexport function initTracing(scopeStr: string | Scope[]) {\n  const scopes = typeof scopeStr === 'string' ? parseScopes(scopeStr) : scopeStr;\n  (console as any).__TRACING__ = scopes;\n  return scopes;\n}\n\nconst colors: Record<Level, Colorize> = {\n  error: red,\n  warn: yellow,\n  info: green,\n  debug: grey,\n};\n\ninterface TracerOptions {\n  /** @default true */\n  color?: boolean;\n}\n\nclass Tracer {\n  constructor(public readonly namespace: string | undefined, private readonly options?: TracerOptions) {}\n\n  error(...args: any) {\n    this.log('error', ...args);\n  }\n\n  warn(...args: any) {\n    this.log('warn', ...args);\n  }\n\n  info(...args: any) {\n    this.log('info', ...args);\n  }\n\n  debug(...args: any) {\n    this.log('debug', ...args);\n  }\n\n  log(level: Level, ...args: any) {\n    const { color = true } = this.options ?? {};\n    const scopes = this.getScopes();\n    const targetLevel = findScopeLevel(scopes, this.namespace ?? 'anything') ?? 'debug';\n\n    if (diffLevel(targetLevel, level) >= 0) {\n      const prefixStr = `[${this.namespace ?? ''}:${level}]`;\n      const prefix = color ? colors[level](prefixStr) : prefixStr;\n      console.log(prefix, ...args);\n    }\n  }\n\n  private getScopes() {\n    const scopes = (console as any).__TRACING__;\n    if (scopes !== undefined) {\n      return scopes;\n    }\n    return initTracing(getProcessEnv('TRACING') ?? 'debug');\n  }\n}\n\nexport function tracer(namespace?: string, options?: TracerOptions) {\n  return new Tracer(namespace, options);\n}\n", "import { type Level, parseLevel } from './level';\n\nexport interface Scope {\n  pattern: string;\n  level: Level;\n}\n\n/** Parse scopes from string */\nexport function parseScopes(scopeStr: string): Scope[] {\n  const scope: Scope[] = [];\n  const values = scopeStr.split(',');\n  for (const value of values) {\n    if (value.includes('=')) {\n      const [namespace, l] = value.split('=');\n      const level = parseLevel(l ?? '');\n      if (namespace !== undefined && level !== undefined) {\n        scope.push({\n          pattern: namespace.replaceAll('*', '.+'),\n          level,\n        });\n      }\n    } else {\n      const level = parseLevel(value.trim());\n      if (level !== undefined) {\n        scope.push({ pattern: '.+', level });\n      }\n    }\n  }\n  return scope;\n}\n\nexport function findScopeLevel(scopes: Scope[], namespace: string): Level | undefined {\n  const scope = scopes.findLast(x => new RegExp(x.pattern).test(namespace));\n  return scope?.level;\n}\n", "export function getProcessEnv(name: string) {\n  if (typeof process !== 'undefined') {\n    const env = process.env[name];\n    return env;\n  }\n  return undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
